package szkeleton;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : IceField.java
//  @ Date : 3/24/2020
//  @ Author : 
//
//



/**
 * Tárolja a jégtábla adatait(szomszédok,
 * rajta álló játékosok,hószint, befagyott tárgy, iglu).
 * Lehet mozogni közöttük, felborul, ha sokan állnak rajta,
 * ki lehet ásni a tárgyat, ha nincs rajta hó.
 * (A hóval fedett lyuk egy 0 kapacitású jégtábla.)
 */
public class IceField {
	//private int snowLevel;
	//private int capacity;
	//private boolean hasIgloo;
	//private boolean capacityRevealed
	private Item item;
	private List<Player> players = new ArrayList<Player>();
	private Map<Direction, IceField> neighbours = new HashMap<Direction, IceField>();
	
	/**
	 * Felborul a jégtábla, így minden rajta álló játékos vízbe esik.
	 */
	private void Capsize() {
		MethodPrinter.Println(Skeleton.GetName(this) + ".Capsize()");
		MethodPrinter.IncreaseIndentation();
		
		for (Player player : players)
			player.FallInWater();
			//Hiányzó metódus a playerbõl.
		
		MethodPrinter.DecreaseIndentation();
	}
	
	/**
	 * Visszaadja a szomszédos jégtáblát a megadott irányba.
	 */
	public IceField GetNeighbour(Direction d) {
		MethodPrinter.Println(Skeleton.GetName(this) + ".GetNeighbour(" + Skeleton.GetName(d) + ")");
		
		return neighbours.get(d);
	}
	
	/**
	 * Csökkenti a hóréteg vastagságát a megadott értékkel.
	 */
	public void RemoveSnow(int a) {
		MethodPrinter.Println(Skeleton.GetName(this) + ".RemoveSnow(" + a + ")");
	}
	
	/**
	 * Növeli a hóréteget és csökkenti a rajtalevõ játékosok testhõjét,
	 * ha nincs a jégtáblán iglu.
	 */
	public void Storm() {
		MethodPrinter.Println(Skeleton.GetName(this) + ".Storm()");
		MethodPrinter.IncreaseIndentation();
		
		if(MethodPrinter.AskQuestion("Van a mezõn iglu?"))
			for(Player player : players)
				player.ChangeTemperature(-1);
		
		MethodPrinter.DecreaseIndentation();
	}
	
	/**
	 * Iglut épít a jégtáblára.
	 */
	public void BuildIgloo() {
		MethodPrinter.Println(Skeleton.GetName(this) + ".BuildIgloo()");
	}
	
	/**
	 * 
	 */
	public boolean CountGunParts(FlareGunPart f) {
		MethodPrinter.Println(Skeleton.GetName(this) + ".");
		MethodPrinter.IncreaseIndentation();
		
		//Kéne metódus lekérdezni és valószínûeg lehetne ezt szebben
		
		MethodPrinter.DecreaseIndentation();
	}
	
	/**
	 * Felveszi a játékost a rajta álló játékosok közé.
	 * Felborul ha, túl sokan állnak így már rajta.
	 */
	public void Accept(Player p) {
		MethodPrinter.Println(Skeleton.GetName(this) + ".Accept(" + Skeleton.GetName(p) + ")");
		MethodPrinter.IncreaseIndentation();
		
		players.add(p);
		if(MethodPrinter.AskQuestion("Túl sokan állnak a jégtáblán?"))
			Capsize();
		
		MethodPrinter.DecreaseIndentation();
	}
	
	/**
	 * Végighívja a GetSaved(Icefield f)-et a rajta álló játékosokon.
	 * True-val tér vissza, ha legalább 1 játékos ki lett mentve.
	 */
	public boolean Save(IceField f) {
		MethodPrinter.Println(Skeleton.GetName(this) + ".Save(" + Skeleton.GetName(f) + ")");
		MethodPrinter.IncreaseIndentation();
		
		boolean success = false;
		for (Player player : players)
			if (player.GetIsInWater()) { //Ez volt az elképzelés?
				player.GetSaved(f);
				success = true;
		}
		
		MethodPrinter.DecreaseIndentation();
		
		return success;
	}
	
	/**
	 * Kiveszi a játékost a rajta állók listájából.
	 */
	public void Remove(Player p) {
		MethodPrinter.Println(Skeleton.GetName(this) + ".Remove(" + Skeleton.GetName(p) + ")");
		
		players.remove(p);
	}
	
	/**
	 * A kapott játékosnak kiássa a befagyott tárgyat.
	 * True-val tér vissza, ha sikerült.
	 */
	public boolean TakeItem(Player p) {
		MethodPrinter.Println(Skeleton.GetName(this) + ".TakeItem(" + Skeleton.GetName(p) + ")");
		MethodPrinter.IncreaseIndentation();
		
		if(MethodPrinter.AskQuestion("Van hó a mezõn?"))
			return false;
		
		boolean success = item.Equip(p);
		if(success)
			item = null;
		
		MethodPrinter.DecreaseIndentation();
		
		return success;
	}
	
	/**
	 * Beállítja kapott irányba levõ szomszédnak a kapott IceFieldet.
	 */
	public void AddNeighbour(Direction d, IceField f) {
		MethodPrinter.Println(Skeleton.GetName(this) + ".AddNeighbour(" + Skeleton.GetName(d) + ", " + Skeleton.GetName(f) + ")");
		
		neighbours.put(d, f);
	}
	
	/**
	 * Felfedi, hogy hányan férnek el a jégtáblán anélkül, hogy felborulna.
	 * Innentõl kezdve végig látszik.
	 */
	public void RevealCapacity() {
		MethodPrinter.Println(Skeleton.GetName(this) + ".RevealCapacity()");
	}
	
	public void SetItem(Item item) {
		this.item = item;
	}
}
